version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: orchestrator-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - orchestrator-network

  # Orchestrator Service
  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: orchestrator-service
    environment:
      # Database
      DATABASE_URL: "prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqd3RfaWQiOjEsInNlY3VyZV9rZXkiOiJza182UmpKQmNCSVdvRi1iZWNiZDVGbmwiLCJhcGlfa2V5IjoiMDFLNjRXUDI3OFNROTUxQTlHN1JHVDNQSjciLCJ0ZW5hbnRfaWQiOiIyYjcwYzNmZmNhODQ1ZDQ1NWJhZjBkYTdiM2ExMjczMGFmNDFjZDAxMWRiZmJkM2QwYjAyZWExZGRkZGJiZTdjIiwiaW50ZXJuYWxfc2VjcmV0IjoiMzNmMThjMjktZmJkMS00YTZhLWE0ZmYtYmJlN2ZmOGFkNTY3In0.URNVO5xVxOq3H7DdY6cGdGk9Ll6_m2wE_4dGSF8qsBc"
      
      # AWS KMS (configure with your actual values)
      AWS_REGION: "us-east-1"
      KMS_KEY_ID: "arn:aws:kms:us-east-1:343218204518:key/f2d33a32-b3dd-4f02-8b0d-c4c0c71f0c4a"
      
      # Chain Configuration
      KADENA_EVM_CHAIN_RPC: "https://evm-testnet.chainweb.com/chainweb/0.0/evm-testnet/chain/20/evm/rpc"
      
      # Contract Addresses
      STABLECOIN_CONTRACT_ADDRESS: "0xeeDBd5C04e1b5116061cB11D9D1fEd9979CA8Cae"
      KYC_REGISTRY_CONTRACT_ADDRESS: "0x94015e24102d91878648Ce91AC4EEc153a8e87d6"
      
      # Relayer Private Key (update with actual key - use secrets in production)
      RELAYER_PRIVATE_KEY: "0x0064DCD414387c19dFB22Bf8DC111358E5b3616e"
      
      # Kuro Service Configuration
      KURO_WEBSOCKET_URL: "ws://kuro-mock:8080/events"
      KURO_REST_URL: "http://kuro-mock:8080/api"
      
      # Redis
      REDIS_URL: "redis://redis:6379"
      
      # Server
      PORT: "3000"
      NODE_ENV: "production"
      LOG_LEVEL: "info"
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - orchestrator-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health/live', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  kuro-mock:
    build:
      context: .
      dockerfile: Dockerfile.kuro-mock
    container_name: kuro-mock
    environment:
      # Chain Configuration
      KADENA_EVM_CHAIN_RPC: "https://evm-testnet.chainweb.com/chainweb/0.0/evm-testnet/chain/20/evm/rpc"
      
      # Contract Addresses
      KYC_REGISTRY_CONTRACT_ADDRESS: "0x2814b08ddDaF12e6042a54BCB5f33cb962EdE28F"
      
      # Relayer Private Key (same as orchestrator)
      RELAYER_PRIVATE_KEY: "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"
    ports:
      - "8080:8080"
    networks:
      - orchestrator-network

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stablecoin-launcher-frontend
    environment:
      # WalletConnect Project ID (update with actual value)
      NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID: "your-walletconnect-project-id"
      
      # KYC Registry Contract Address
      NEXT_PUBLIC_KYC_REGISTRY_ADDRESS: "0x2814b08ddDaF12e6042a54BCB5f33cb962EdE28F"
      
      # Kadena EVM RPC URL
      NEXT_PUBLIC_KADENA_EVM_RPC: "https://evm-testnet.chainweb.com/chainweb/0.0/evm-testnet/chain/20/evm/rpc"
    ports:
      - "3001:3000"
    depends_on:
      - orchestrator
    restart: unless-stopped
    networks:
      - orchestrator-network

volumes:
  redis_data:
    driver: local

networks:
  orchestrator-network:
    driver: bridge